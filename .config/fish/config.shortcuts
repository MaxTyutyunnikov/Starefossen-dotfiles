#!/usr/bin/fish

# Basic shortcuts
alias l="ls"

switch (uname)
  case Darwin
    alias ls="ls -lG"
  case '*'
    alias ls="ls -l --group-directories-first --color=always"
end

alias mv="mv -v"
alias cp="cp -v"
alias rm="rm -v"
alias ssh="ssh -v"
alias cal="cal -m"

function pgrep -d "more info for pgrep"
  set pidlist (command pgrep -d, -x $argv)
  if test -n "$pidlist"
    ps -fp $pidlist
  end
end

function mkcd -d "mkdir AND cd to it in one go!"
  mkdir -p $argv
  if test $status = 0
    cd $argv
  end
end

function keyhashes -d "View server key-hashes"
  for key in (command ls /etc/ssh/ssh_*_key.pub)
    ssh-keygen -lf $key
  end
end

function noprompt -d "Disable the prompt"
  function fish_prompt
    echo "> "
  end
end

# VMWare
function vmstart -d "Start VMWare Fusion vm"
  set path $HOME"/Documents/Virtual Machines.localized/"$argv".vmwarevm/$argv.vmx"
  vmrun -T fusion start $path nogui
end

function vmstop -d "Stop VMWare Fusion vm"
  set path $HOME"/Documents/Virtual Machines.localized/"$argv".vmwarevm/$argv.vmx"
  vmrun -T fusion stop $path hard
end

# Kubernetes
function kubectl-select -d "Select kubectl config"
  rm ~/.kube/config
  ln -v -s ~/.kube/config."$argv" ~/.kube/config
end

# Docker
alias d="docker"
alias dc="docker-compose"
alias dm="docker-machine"
alias ds="docker-swarm"
alias dsh="docker run -it --rm --entrypoint /bin/sh -v (pwd):/root/src -w /root/src"
alias dbash="docker run -it --rm --entrypoint /bin/bash -v (pwd):/root/src -w /root/src"

# Docker Compose Run
alias dr="docker-compose run --rm"

# Docker Hygiene
alias dclean="docker rm (docker ps -aqf status=exited)"
alias dcrmf="docker-compose stop -t 0; docker-compose rm -f"

# NPM / Node
alias yarn="docker-compose run --rm node yarn"
alias npm="docker-compose run --rm node npm"
alias node="docker-compose run --rm node node"

# Developer Tools
alias shellcheck="docker run --rm -it -v (pwd):/mnt nlknguyen/alpine-shellcheck"

function kioskmode -d "Open URL in kiosk mode"
  command /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --kiosk --app=$argv[1]
end

# macOS
function flushdns -d "Flush DNS cache"
  sudo dscacheutil -flushcache
  sudo killall -HUP mDNSResponder
end

# Applications
function top -d "Use htop, not top"; htop; end
function netstat -d "Netstat with some commonly used options"
  command sudo netstat --numeric --inet -p $argv
end
function easy_install
  echo "pip installs packages. Python packages. An easy_install replacement."
end

# Other stuff
function servedir -d "Serve files of cwd"
  ifconfig | grep "inet addr"
  python -m SimpleHTTPServer
end

function checkip -d "Print this machines external IP address"
  wget http://checkip.dyndns.org/ -O - -o /dev/null | cut -d\  -f 6 | cut -d\< -f 1;
end

function sendkey -d "Send ssh public key to some remote host (ssh-copy-id alternative)"
  if test -f ~/.ssh/id_rsa.pub
    if test (count $argv) -lt 2
      set port 22
    else
      set port $argv[2]
    end
    if test (count $argv) -gt 0
      ssh $argv[1] -p $port "mkdir -p ~/.ssh; touch ~/.ssh/authorized_keys; cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_rsa.pub
    end
  else
    echo "There is no ~/.ssh/id_rsa.pub, please generate your keys with 'ssh-keygen'"
  end
end

function prettyJson -d "Pretty-print json (/usr/bin/prettify_json.rb works fine too)"
  echo "Use /usr/local/bin/pjson"
end

#function prettyJson -d "Pretty-print json (/usr/bin/prettify_json.rb works fine too)"
#  python -m json.tool
#end

function man
  if test "$argv[1]" = "lsof"
    echo http://danielmiessler.com/study/lsof/
  else
    command man $argv
  end
end

function ff -d "Find string in current working directory using mdfind"
  if test (count $argv) -lt 2
    set location .
  else
    set location $argv[2]
  end

  for file in (mdfind -onlyin "$location" "$argv[1]")
    echo \n;
    echo "$file";
    echo \n;

    grep -in --color -A 5 -B 5 "$argv[1]" "$file"
  end
end

function mvtv -d "Send to mediaserver"
  set path (echo -n "L1ZvbHVtZXMvMiBUQiBMYUNpZS9GaWxtZXIvVFY=" | base64 --decode)
  set show $argv[1]
  set season $argv[2]
  set src $argv[3..-1]

  scp -v $src mediaserver:"'$path/$show/Season $season/'"
end

function addpaths
    contains -- $argv $fish_user_paths
       or set -U fish_user_paths $fish_user_paths $argv
    echo "Updated PATH: $PATH"
end

function removepath
    if set -l index (contains -i $argv[1] $PATH)
        set --erase --universal fish_user_paths[$index]
        echo "Updated PATH: $PATH"
    else
        echo "$argv[1] not found in PATH: $PATH"
    end
end

function watch -d "Watch for changes and run command"
  if test (count $argv) -lt 2
    set location .
    set cmd $argv[1..-1]
  else
    set location $argv[1]
    set cmd $argv[2..-1]
  end

  echo "Watching '$location' and running '$cmd'..."
  fswatch -o $location | xargs -t -I{} "*" $cmd
end
